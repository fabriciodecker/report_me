version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: reportme_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-reportme}
      POSTGRES_USER: ${DB_USER:-reportme}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-reportme} -d ${DB_NAME:-reportme}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - reportme_network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: reportme_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - reportme_network

  # Backend Django (produção)
  api:
    build: 
      context: ./reportme_api
      dockerfile: Dockerfile.prod
    container_name: reportme_api_prod
    environment:
      - DJANGO_SETTINGS_MODULE=reportme.settings_prod
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${DB_NAME:-reportme}
      - DB_USER=${DB_USER:-reportme}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/var/log/reportme
      - ./backups:/var/backups/reportme
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/core/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - reportme_network

  # Frontend React (produção)
  frontend:
    build:
      context: ./reportme_front
      dockerfile: Dockerfile.prod
    container_name: reportme_frontend_prod
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - NODE_ENV=production
    volumes:
      - frontend_static:/app/build
    depends_on:
      - api
    networks:
      - reportme_network
    restart: unless-stopped

  # Nginx (proxy reverso)
  nginx:
    image: nginx:alpine
    container_name: reportme_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - frontend_static:/var/www/html:ro
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - reportme_network

  # Worker para tarefas assíncronas (opcional)
  worker:
    build:
      context: ./reportme_api
      dockerfile: Dockerfile.prod
    container_name: reportme_worker
    command: python manage.py rqworker default --settings=reportme.settings_prod
    environment:
      - DJANGO_SETTINGS_MODULE=reportme.settings_prod
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-reportme}
      - DB_USER=${DB_USER:-reportme}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./logs:/var/log/reportme
      - ./backups:/var/backups/reportme
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - reportme_network

  # Monitoramento com Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: reportme_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - reportme_network

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: reportme_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - reportme_network

networks:
  reportme_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  frontend_static:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
